
//Name: Hetarth Parikh
//Unit,Lesson,Name of Assignment: Unit 1 Lesson 10, summative Calculator Assignment
//Date of Completion: September 20th 2024
//Description: This is a program of a calculator which you can use to multiply
//add, subtract, divide,use square root, powers
//and toggle negatives and can even see your calculation history!
//Basically what I modified in this code prior to the previous is that I handled
//the error checking better as now the user can't type in the text field and 
//also can't enter more than one decimal point as well
//I also added more function buttons such as a power button and a square root
//and toggling negative and also a remove button to backspace digits





//Imports for the 
package jCalculator;
import java.awt.Color; // Importing Color class for setting background or colors
import javax.swing.JFrame; // Importing JFrame to create the window
import javax.swing.JTextArea; // Importing JTextArea to allow user to display 
                              //multi-line text.
import javax.swing.JScrollPane; //To add scrolling functionality to components.
import javax.swing.JButton; // This is to create clickable buttons
import javax.swing.JOptionPane;
  
 
public class JavaCalculator extends javax.swing.JFrame {
    private double total1=0.0;//this holds the current total for the recent operation
    private double total2=0.0;//The result for the previous operation
    private double total3=1.0;//Used for multiplication, is 1 to avoid multiplying
                              //by 0. 
    private double total4=0.0;//The variable used for division total
    private String currentSign="";//this keeps track of current operation sign
    private String history ="";//This variable stores the history of calculations
    private boolean isEqualClicked = false;//This will act as a flag to basically
                                           //trakc when the equal button is clicked
                                           //so that the remove error message 
                                           //doesn't pop up for additional operations
    private boolean isbtnRootClicked=false;
    /**
     * Creates new form JavaCalculator
     */
    public JavaCalculator() {
        initComponents();
        
    }
    
    
     // Add to appropriate container/layout
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtDisplay = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        btnOne = new javax.swing.JButton();
        btnTwo = new javax.swing.JButton();
        btnThree = new javax.swing.JButton();
        btnFour = new javax.swing.JButton();
        btnFive = new javax.swing.JButton();
        btnSix = new javax.swing.JButton();
        btnSeven = new javax.swing.JButton();
        btnEight = new javax.swing.JButton();
        btnNine = new javax.swing.JButton();
        btnZero = new javax.swing.JButton();
        btnDecimal = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        btnPlus = new javax.swing.JButton();
        btnEqual = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnMultiply = new javax.swing.JButton();
        btnDivide = new javax.swing.JButton();
        btnSubtract = new javax.swing.JButton();
        btnRoot = new javax.swing.JButton();
        btnPower = new javax.swing.JButton();
        btnNeg = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnHistory = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Calculator");

        txtDisplay.setEditable(false);
        txtDisplay.setBackground(new java.awt.Color(153, 204, 255));
        txtDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDisplayActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));

        btnOne.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnOne.setText("1");
        btnOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOneActionPerformed(evt);
            }
        });

        btnTwo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnTwo.setText("2");
        btnTwo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTwoActionPerformed(evt);
            }
        });

        btnThree.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnThree.setText("3");
        btnThree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThreeActionPerformed(evt);
            }
        });

        btnFour.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnFour.setText("4");
        btnFour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFourActionPerformed(evt);
            }
        });

        btnFive.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnFive.setText("5");
        btnFive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiveActionPerformed(evt);
            }
        });

        btnSix.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnSix.setText("6");
        btnSix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSixActionPerformed(evt);
            }
        });

        btnSeven.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnSeven.setText("7");
        btnSeven.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSevenActionPerformed(evt);
            }
        });

        btnEight.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnEight.setText("8");
        btnEight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEightActionPerformed(evt);
            }
        });

        btnNine.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnNine.setText("9");
        btnNine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNineActionPerformed(evt);
            }
        });

        btnZero.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnZero.setText("0");
        btnZero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZeroActionPerformed(evt);
            }
        });

        btnDecimal.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnDecimal.setText(".");
        btnDecimal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecimalActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(0, 102, 102));

        btnPlus.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnPlus.setText("+");
        btnPlus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlusActionPerformed(evt);
            }
        });

        btnEqual.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnEqual.setText("=");
        btnEqual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEqualActionPerformed(evt);
            }
        });

        btnClear.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnClear.setText("Clear");
        btnClear.setToolTipText("");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnMultiply.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnMultiply.setText("X");
        btnMultiply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMultiplyActionPerformed(evt);
            }
        });

        btnDivide.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnDivide.setText("รท");
        btnDivide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDivideActionPerformed(evt);
            }
        });

        btnSubtract.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnSubtract.setText("-");
        btnSubtract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubtractActionPerformed(evt);
            }
        });

        btnRoot.setText("โ");
        btnRoot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRootActionPerformed(evt);
            }
        });

        btnPower.setText("Power");
        btnPower.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPowerActionPerformed(evt);
            }
        });

        btnNeg.setText("+/-");
        btnNeg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNegActionPerformed(evt);
            }
        });

        btnBack.setText("Backspace");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnNeg, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(btnRoot, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnPower)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(btnDivide, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(btnSubtract, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(btnMultiply, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnPlus, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(btnEqual, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnClear))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(btnBack)))
                .addContainerGap(112, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBack)
                .addGap(87, 87, 87)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMultiply)
                    .addComponent(btnPlus, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSubtract, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDivide))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEqual, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRoot)
                    .addComponent(btnPower))
                .addGap(18, 18, 18)
                .addComponent(btnNeg)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnOne, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFour, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSeven, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnFive, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSix, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnEight, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnNine, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnTwo, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnThree, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnZero, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDecimal)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOne, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTwo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnThree, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFive, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFour, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSix, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEight, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSeven, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNine, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnZero, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDecimal))
                .addGap(58, 58, 58))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        btnHistory.setText("Calculation History");
        btnHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHistoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addComponent(txtDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(93, 93, 93)
                        .addComponent(btnHistory))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(200, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnHistory))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(152, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void txtDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDisplayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDisplayActionPerformed

    private void btnThreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThreeActionPerformed
        // TODO add your handling code here:
        
        //This line below concatenates the text in the display with the text shown
        //on the button of the calculator. 
        String btnThreeText = txtDisplay.getText()+ btnThree.getText();
     
    txtDisplay.setText(btnThreeText);// Updates the text in the display to show 
                                    //the new concatenated string
    }//GEN-LAST:event_btnThreeActionPerformed

    private void btnOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOneActionPerformed
        // TODO add your handling code here:
        //We're saying to get the text from the text field and combine it with
        //the button text. Store this result in the variable called btOneText.
        //Same as above with the button three text where it concatenates the text.
    String btnOneText = txtDisplay.getText()+ btnOne.getText();  
    txtDisplay.setText(btnOneText);        



    }//GEN-LAST:event_btnOneActionPerformed

    private void btnTwoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTwoActionPerformed
        // TODO add your handling code here:
        
        //We're saying to get the text from the text field and combine it with
        //the button text. Store this result in the variable called btnTwoText.
        
        String btnTwoText = txtDisplay.getText()+ btnTwo.getText();  
    txtDisplay.setText(btnTwoText);
        
    }//GEN-LAST:event_btnTwoActionPerformed

    private void btnFourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFourActionPerformed
        // TODO add your handling code here:
        
        //We're saying to get the text from the text field and combine it with
        //the button text. Store this result in the variable called btnFourText.
        String btnFourText = txtDisplay.getText()+ btnFour.getText();  
    txtDisplay.setText(btnFourText);
        
    }//GEN-LAST:event_btnFourActionPerformed

    private void btnFiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiveActionPerformed
        // TODO add your handling code here:
        
        //We're saying to get the text from the text field and combine it with
        //the button text. Store this result in the variable called btnFiveText.
        String btnFiveText = txtDisplay.getText()+ btnFive.getText();  
    txtDisplay.setText(btnFiveText);
    }//GEN-LAST:event_btnFiveActionPerformed

    private void btnSixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSixActionPerformed
        // TODO add your handling code here:
        //We're saying to get the text from the text field and combine it with
        //the button text. Store this result in the variable called btnSixText.
        String btnSixText = txtDisplay.getText()+ btnSix.getText();  
    txtDisplay.setText(btnSixText);
    }//GEN-LAST:event_btnSixActionPerformed

    private void btnSevenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSevenActionPerformed
        // TODO add your handling code here:
        //We're saying to get the text from the text field and combine it with
        //the button text. Store this result in the variable called btnSevenText.
        String btnSevenText = txtDisplay.getText()+ btnSeven.getText();  
    txtDisplay.setText(btnSevenText);
    }//GEN-LAST:event_btnSevenActionPerformed

    private void btnEightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEightActionPerformed
        // TODO add your handling code here:
        //We're saying to get the text from the text field and combine it with
        //the button text. Store this result in the variable called btnEightText.
        String btnEightText = txtDisplay.getText()+ btnEight.getText();  
    txtDisplay.setText(btnEightText);
    }//GEN-LAST:event_btnEightActionPerformed

    private void btnNineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNineActionPerformed
        // TODO add your handling code here:
        //We're saying to get the text from the text field and combine it with
        //the button text. Store this result in the variable called btnNineText.
        String btnNineText = txtDisplay.getText()+ btnNine.getText();  
    txtDisplay.setText(btnNineText);
    }//GEN-LAST:event_btnNineActionPerformed

    private void btnZeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnZeroActionPerformed
        // TODO add your handling code here:
        //We're saying to get the text from the text field and combine it with
        //the button text. Store this result in the variable called btnZeroText.
        String btnZeroText = txtDisplay.getText()+ btnZero.getText();  
    txtDisplay.setText(btnZeroText);
    }//GEN-LAST:event_btnZeroActionPerformed

    private void btnPlusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlusActionPerformed
        // TODO add your handling code here:
        
       if (txtDisplay.getText().isEmpty()) {
        return; // Avoid adding with empty input
    }
    total1 += Double.parseDouble(txtDisplay.getText()); // Add current number to total1
    txtDisplay.setText(""); //Basically this clears the display for next input
    currentSign = "add";//Since the button is for adding, keep track of operation 
    btnPlus.setBackground(Color.GREEN);//Turns the button green when clicked
    isEqualClicked = false;//This sets the flag to false to reset after for any
                           //additional operations
    isbtnRootClicked=false;//This sets the flag to false to reset after for any
                           //additional operations

    
    }//GEN-LAST:event_btnPlusActionPerformed

    private void btnEqualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEqualActionPerformed
        // TODO add your handling code here:
        
        //This converts the current value in the display into a double since
        //these are math operations.
        double currentNumber= Double.parseDouble(txtDisplay.getText());
        
       if ("multiply".equals(currentSign)) {
        double result = total3 * currentNumber; // This performs multiplication
        txtDisplay.setText(Double.toString(result));//converts result back to string

        // Updates history with all multiplication calculations
        history += total3 + " * " + currentNumber + " = " + result + "\n";
        total3 = result;//This stores the result in case of other operations added
        
        
       } else if ("divide".equals(currentSign)) {
        double result = total4 / currentNumber; // This performs division
        txtDisplay.setText(Double.toString(result));//converts result back to string
        
        // Updates history with all the division calculations
        history += total4 + " / " + currentNumber + " = " + result + "\n";
        total4 = result;//Stores the result again in case of other operations added
        
    } else if ("add".equals(currentSign)) {
        total2 = total1 + currentNumber; //This performs addition and stores in total2
        txtDisplay.setText(Double.toString(total2));//converts result back to string
        history += total1 + " + " + currentNumber + " = " + total2 + "\n";
        total1 = 0; //Basically this resets the total1 for the next operation\
        
        
    }  else if ("subtract".equals(currentSign)) {
        total1 -= currentNumber; //This performs subtraction 
        txtDisplay.setText(Double.toString(total1));//converts result back to string
        
        //Updates history with all the subtraction calculations
        history += (total1 + currentNumber) + " - " + currentNumber + " = " + total1 + "\n"; 
        
       
    }   else if ("power".equals(currentSign)) {
    //This here gets the exponent from the display
    double exponent = Double.parseDouble(txtDisplay.getText());

    //This function performs the power calculation
    double result = Math.pow(total1, exponent);

    // This will display the result in the text field
    txtDisplay.setText(Double.toString(result));

    //This function will update the history with the power calculation made
    history += total1 + " ^ " + exponent + " = " + result + "\n";

    // Reset total1 after the calculation
    total1 = result;
    } else {
        //This else statement here is there to handle other cases if necessary
    }
    isEqualClicked = true;//This sets the flag to true when the button is clicked
    
    //The currentSign variable here is used to reset the current sign after 
    //the operation is done
    currentSign = "";
       
    }//GEN-LAST:event_btnEqualActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        
        //These all reset the vriables when cleared
        total2=0;
        total1=0;
        total3=1;
        total4=0;
        currentSign="";//This clears the current operation sign
        txtDisplay.setText("");//This clears the text field in the calculator display\
        isEqualClicked = false; //This sets the flag to false to reset after for any
                           //additional operations
        isbtnRootClicked = false;//This sets the flag to false to reset after for any
                           //additional operations
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnDecimalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecimalActionPerformed
        // TODO add your handling code here:
        
        // Get the current text in the display
    String currentText = txtDisplay.getText();
    
    // Check if the current text already contains a decimal point
    if (!currentText.contains(".")) {
        // If there's no decimal point, concatenate the current text with the
        //decimal button text is what its saying basically
        String btnDecimalText = currentText + btnDecimal.getText();
        
        // Set the new text with the decimal point in the display
        txtDisplay.setText(btnDecimalText);
    }
    // If there is already a decimal point, do nothing, so that another one isnt
    //added into it

        
    }//GEN-LAST:event_btnDecimalActionPerformed

    private void btnMultiplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMultiplyActionPerformed
        // TODO add your handling code here:
         if (txtDisplay.getText().isEmpty()) {
        return; // This avoids multiplying with any empty inputs in the calculator
    }
    //This converts the current text display into a double and stores it in the 
    //total3 variable so multiplication can happen
    total3 = Double.parseDouble(txtDisplay.getText());
    txtDisplay.setText(""); //This command here clears the display for next input
    currentSign = "multiply";//In order to keep track that the next operation will
                             //be multiplication
    //Changes the color of the button to blue when it is clicked
    btnMultiply.setBackground(Color.BLUE);
    isEqualClicked = false;//This sets the flag to false to reset after for any
                           //additional operations
    isbtnRootClicked=false;//This sets the flag to false to reset after for any
                           //additional operations

    
    }//GEN-LAST:event_btnMultiplyActionPerformed

    private void btnDivideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDivideActionPerformed
        // TODO add your handling code here:
         if (txtDisplay.getText().isEmpty()) {
        return; //This avoids dividing with empty input
    }
    //This converts text Display into a double and stores it in total4 variable
    total4 = Double.parseDouble(txtDisplay.getText());
    txtDisplay.setText(""); // Basically it clears the display for next input
    currentSign = "divide";//Keeps track that the next operation is to divide
    //Turns the button color to green when clicked
    btnDivide.setBackground(Color.GREEN);
    isEqualClicked = false;//This sets the flag to false to reset after for any
                           //additional operations
    isbtnRootClicked=false;//This sets the flag to false to reset after for any
                           //additional operations

        
    }//GEN-LAST:event_btnDivideActionPerformed

    private void btnSubtractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubtractActionPerformed
        // TODO add your handling code here:
       if (txtDisplay.getText().isEmpty()) {
        return; // This avoids subtracting with any empty inputs
    }
    
    //This still converts the current text display into a double to represent the 
    //number entered bty the user.
    
    double currentNumber = Double.parseDouble(txtDisplay.getText());

    //So if its the first operation, this sets total1 to the current number
    if (total1 == 0) {
        total1 = currentNumber;
    } else {
        // If there's already a number in total1, 
        //its saying to subtract the current number from it
        total1 -= currentNumber;//if total1 has a value already, subtract the
                                //current number from total1 is what its saying
    }

    //This now clears the display for the next input like always
    txtDisplay.setText("");

    //Keeps tracks that subtraction is the current operation in use
    currentSign = "subtract";
    btnSubtract.setBackground(Color.BLUE);//Sets the color of the button to 
                                             //magenta when clicked
    isEqualClicked = false;//This sets the flag to false to reset after for any
                           //additional operations
    isbtnRootClicked=false;//This sets the flag to false to reset after for any
                           //additional operations
                       
    }//GEN-LAST:event_btnSubtractActionPerformed

    private void btnHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHistoryActionPerformed
        // TODO add your handling code here:
        
                                               
    //This creates a new JFrame or window to display the history of your calculations
    JFrame historyFrame = new JFrame("Calculation History");
    historyFrame.setSize(400, 300); //This sets the size of the window (x,y)

    //This creates a JTextArea which is a text field and sets the history text as well
    //If the history field is empty, it will let the user know they havent made any
    //calculations just yet, and will show them once user completes them
    JTextArea historyArea = new JTextArea(history.isEmpty() ? "No history yet." : history);
    historyArea.setEditable(false); //This makes the text area read-only, which means
                                    //that the user can't change any history text
                                    //This is useful to avoid accidental typings etc. 

    //This adds the text area to the window within a JScrollPane
    //This is to handle a large amount of history logs so the user can scroll properly
    JScrollPane scrollPane = new JScrollPane(historyArea);
    historyFrame.add(scrollPane);

    //This is an important command to actually make the window visible
    historyFrame.setVisible(true);


    }//GEN-LAST:event_btnHistoryActionPerformed

    private void btnRootActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRootActionPerformed
        // TODO add your handling code here:
        //This functions gets the current number from the display
    String currentText = txtDisplay.getText();
    
    //checks if the display is not empty or it is
    if (!currentText.isEmpty()) {
        double currentNumber = Double.parseDouble(currentText);
        
        // Check if the number is non-negative
        if (currentNumber >= 0) {
            // Calculate the square root
            double result = Math.sqrt(currentNumber);
            
            //This then will display the result in the text field
            txtDisplay.setText(Double.toString(result));
            
            //This function here update history with the square root calculation
            history += "โ" + currentNumber + " = " + result + "\n";
            isbtnRootClicked= true;//This sets the flag to true
        } else {
            // If the number is negative, it will show an error message
            txtDisplay.setText("Negative Input! Please re-enter");
            btnRoot.setBackground(Color.ORANGE);
            
        isEqualClicked = false;//This sets the flag to false to reset after for any
                           //additional operations
        
        }
    }
    }//GEN-LAST:event_btnRootActionPerformed

    private void btnPowerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPowerActionPerformed
        // TODO add your handling code here:
            //This checks if its empty or not
            if (!txtDisplay.getText().isEmpty()) {
        total1 = Double.parseDouble(txtDisplay.getText()); //This stores the base
        txtDisplay.setText(""); //This basically clears the display for exponent input
        currentSign = "power"; //The current sign is set to the operation of the power
        btnPower.setBackground(Color.ORANGE); //This is for fun to change the color
                                              // when its clicked
        
                                              
        isEqualClicked = false;//This sets the flag to false to reset after for any
                           //additional operations
        isbtnRootClicked=false;//This sets the flag to false to reset after for any
                           //additional operations
    }
        
    }//GEN-LAST:event_btnPowerActionPerformed

    private void btnNegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNegActionPerformed
        // TODO add your handling code here:
        //This code here is to toggle negative numbers for calculations
        //This will get the current text in the display
        String currentText = txtDisplay.getText();
    
    //This will check if the display is empty
    if (currentText.isEmpty()) {
        // If the display is empty, this will basically add a "-" sign for negative input
        txtDisplay.setText("-");
    } else {
        // If there is already a number, toggle its sign
        double currentNumber = Double.parseDouble(currentText);
        currentNumber *= -1; // Multiply by -1 to toggle between positive and negative
        txtDisplay.setText(Double.toString(currentNumber));
        btnNeg.setBackground(Color.ORANGE);//Changes color like the other buttons
    }
    }//GEN-LAST:event_btnNegActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        if (isEqualClicked || isbtnRootClicked) {
        // If the equal or root button was clicked, show a message and prevent any removal
        JOptionPane.showMessageDialog(null, "Cannot delete after the calculation is done!", "Error", JOptionPane.ERROR_MESSAGE);
    } else {
        //This function gets the current text in the display
        String currentText = txtDisplay.getText();

        //This function basically checks if the display is not empty
        if (!currentText.isEmpty()) {
            //This will just remove the last character from the current text
            currentText = currentText.substring(0, currentText.length() - 1);
            
            //This will update the display with the new text
            txtDisplay.setText(currentText);
        } else {
            // If the text field is empty, show an error message
            JOptionPane.showMessageDialog(null, "Please enter a digit to remove!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
        
    }//GEN-LAST:event_btnBackActionPerformed
       
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JavaCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JavaCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JavaCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JavaCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JavaCalculator().setVisible(true);
            }
        });
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDecimal;
    private javax.swing.JButton btnDivide;
    private javax.swing.JButton btnEight;
    private javax.swing.JButton btnEqual;
    private javax.swing.JButton btnFive;
    private javax.swing.JButton btnFour;
    private javax.swing.JButton btnHistory;
    private javax.swing.JButton btnMultiply;
    private javax.swing.JButton btnNeg;
    private javax.swing.JButton btnNine;
    private javax.swing.JButton btnOne;
    private javax.swing.JButton btnPlus;
    private javax.swing.JButton btnPower;
    private javax.swing.JButton btnRoot;
    private javax.swing.JButton btnSeven;
    private javax.swing.JButton btnSix;
    private javax.swing.JButton btnSubtract;
    private javax.swing.JButton btnThree;
    private javax.swing.JButton btnTwo;
    private javax.swing.JButton btnZero;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField txtDisplay;
    // End of variables declaration//GEN-END:variables
}
